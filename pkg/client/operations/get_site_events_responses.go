// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/bah2830/unifi_api/pkg/models"
)

// GetSiteEventsReader is a Reader for the GetSiteEvents structure.
type GetSiteEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSiteEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSiteEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewGetSiteEventsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetSiteEventsOK creates a GetSiteEventsOK with default headers values
func NewGetSiteEventsOK() *GetSiteEventsOK {
	return &GetSiteEventsOK{}
}

/*GetSiteEventsOK handles this case with default header values.

successful site event response
*/
type GetSiteEventsOK struct {
	Payload *models.GetSiteEventsResponse
}

func (o *GetSiteEventsOK) Error() string {
	return fmt.Sprintf("[GET /s/{site_name}/stat/event][%d] getSiteEventsOK  %+v", 200, o.Payload)
}

func (o *GetSiteEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GetSiteEventsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSiteEventsDefault creates a GetSiteEventsDefault with default headers values
func NewGetSiteEventsDefault(code int) *GetSiteEventsDefault {
	return &GetSiteEventsDefault{
		_statusCode: code,
	}
}

/*GetSiteEventsDefault handles this case with default header values.

Error response
*/
type GetSiteEventsDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get site events default response
func (o *GetSiteEventsDefault) Code() int {
	return o._statusCode
}

func (o *GetSiteEventsDefault) Error() string {
	return fmt.Sprintf("[GET /s/{site_name}/stat/event][%d] getSiteEvents default  %+v", o._statusCode, o.Payload)
}

func (o *GetSiteEventsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
